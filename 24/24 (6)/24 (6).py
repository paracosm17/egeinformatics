# Текстовый файл содержит строки различной длины. Общий объём файла не превышает 1 Мбайт. 
# Строки содержат только заглавные буквы латинского алфавита (ABC…Z).
# Необходимо найти строку, содержащую наименьшее количество букв G 
# (если таких строк несколько, надо взять ту, которая находится в файле раньше), и определить, 
# какая буква встречается в этой строке чаще всего. Если таких букв несколько, надо взять ту, 
# которая позже стоит в алфавите.
# https://inf-ege.sdamgia.ru/problem?id=35482

from statistics import multimode

f = open("24 (6).txt").read().splitlines()
mylist = []

# Генерируем список вида [[18, 332], [19, 89], [23, 372], ...]
# Где каждый подсписок - это строка. Первый элемент подсписка - количество букв g, второй элемент - номер строки
for index, line in enumerate(f):
    mylist.append([line.count("G"), index])

# Сортируем наш список. Таким образом первый подсписок будет с наименьшим количеством букв g. Берем от туда индекс строки
# И с помощью него получаем искомую строку из файла. 
# Далее с помощью функции multimode() находим самые частовстречаемые символы в строке
# И с помощью max() выводим букву, которая стоит позже в алфавите, так как max() при сравнении букв
# Сравнивает их значение в Unicode, а у какой буквы оно больше, та и стоит позже
print(max(multimode(f[sorted(mylist)[0][1]])))
